#!/usr/bin/env php
<?php

// Try to locate Composer's autoloader in two scenarios:
// 1. Running php-testify in its own repo (dev mode).
// 2. Running php-testify as a dependency from another project.
$autoloadCandidates = [
    // php-testify repo root (php-testify/vendor/autoload.php)
    __DIR__ . '/../vendor/autoload.php',
    // consuming project's root (yourApp/vendor/autoload.php)
    __DIR__ . '/../../../autoload.php',
];

$autoloadLoaded = false;
foreach ($autoloadCandidates as $path) {
    if (is_file($path)) {
        require $path;
        $autoloadLoaded = true;
        break;
    }
}

if (!$autoloadLoaded) {
    fwrite(STDERR, "[php-testify] Fatal: could not locate Composer autoload.php\n");
    fwrite(STDERR, "Tried:\n");
    foreach ($autoloadCandidates as $p) {
        fwrite(STDERR, " - {$p}\n");
    }
    exit(1);
}

use Testify\Runner;
use Testify\Watcher;

// Path to the consuming project's phpunit.config.php.
// We assume it's at project root (same place you'd run composer).
$configFile = getcwd() . DIRECTORY_SEPARATOR . 'phpunit.config.php';
if (!is_file($configFile)) {
    fwrite(STDERR, "[php-testify] Fatal: phpunit.config.php not found in project root (" . $configFile . ")\n");
    exit(1);
}

// Parse CLI flags passed to this script.
$args = $argv;
array_shift($args); // remove script name

$options = [
    'filter'  => null,
    'colors'  => true,
    'verbose' => false,
    'watch'   => false,
];

for ($i = 0; $i < count($args); $i++) {
    $arg = $args[$i];

    if ($arg === '--no-colors') {
        $options['colors'] = false;
        continue;
    }

    if ($arg === '--verbose') {
        $options['verbose'] = true;
        continue;
    }

    if ($arg === '--watch') {
        $options['watch'] = true;
        continue;
    }

    if ($arg === '--filter') {
        $next = $args[$i + 1] ?? null;
        if ($next === null) {
            fwrite(STDERR, "[php-testify] --filter requires a value\n");
            exit(1);
        }
        $options['filter'] = $next;
        $i++;
        continue;
    }

    fwrite(STDERR, "[php-testify] Unknown option: {$arg}\n");
    exit(1);
}

// --watch mode: keep process alive, rerun tests on file change
if ($options['watch'] === true) {
    $watcher = new Watcher(
        $configFile,
        [
            'filter'  => $options['filter'],
            'colors'  => $options['colors'],
            'verbose' => $options['verbose'],
        ]
    );

    $watcher->watchLoop();
    exit(0);
}

// normal one-shot run
$runner = new Runner(
    $configFile,
    [
        'filter'  => $options['filter'],
        'colors'  => $options['colors'],
        'verbose' => $options['verbose'],
    ]
);

$exitCode = $runner->run();
exit($exitCode);
